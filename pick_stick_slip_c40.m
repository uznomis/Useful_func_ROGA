% This program reads in Shifted_c40 files and plots mechanical data. It
% provides ability to pick up points and yield y values w.r.t time.

%% Import
[filename, filepath] = uigetfile...
    ('*.*', 'Please select c40 files generated by quickview');
if filename == 0
    return
end

ROGAc40matwithNaN = dlmread([filepath,filename],'',1,0);
M = ROGAc40matwithNaN(3:end-2,:);

%% Re-initialize Database
DB = {};

%% Plot or Re-plot

% Parameters
indexOfTime = 21;
indicesToPlot = [24, 25];
indicesToSmoothen = [24];
smoothSpan = 10;
indicesToDot = [];
linewidth = 1;
ylimits = [-0.1, 1.1];
marker = '.';

% Plot
T = M(:,indexOfTime);
if exist('fig','var') && isvalid(fig)
    figure(fig);
    xRange = xlim;
    leftInd = find(T > xRange(1),1,'first');
    rightInd = find(T < xRange(2),1,'last');
    clf(fig);
else
    fig = figure('name', ['pick stick slip from ',filename]);
    leftInd = 1;
    rightInd = length(M);
    xRange = [T(leftInd), T(rightInd)];
end

hold on
for i = 1:length(indicesToPlot)
    smoothening = 1;
    if ismember(indicesToPlot(i), indicesToSmoothen)
        smoothening = smoothSpan;
    end
    toPlot = smooth(M(:,indicesToPlot(i)), smoothening);
    toPlot = toPlot - min(toPlot(leftInd:rightInd));
    toPlot = toPlot/max(toPlot(leftInd:rightInd));
    if ismember(indicesToPlot(i), indicesToDot)
        plot(T,toPlot,'linewidth',linewidth,'marker',marker);
    else
        plot(T,toPlot,'linewidth',linewidth);
    end
end
hold off
xlim(xRange);
ylim(ylimits);
legend(cellstr(num2str(indicesToPlot')));

if 1
    return
end

%% Reset Zoom
xlim auto
ylim auto

%% Export Point
format longE
try
    dcm_obj = datacursormode(gcf);
    c_info = getCursorInfo(dcm_obj);
    c_info = fliplr(c_info);
    tempData = [];
    for i = 1:length(c_info)
        % display
        xValue = c_info(i).Position(1);
        xInd = find(T > xValue,1,'first');  
        colInd = c_info(i).Target.DisplayName;
        disp(['Time ',num2str(xValue),' Column ', colInd]);
        disp([xValue M(xInd, str2double(colInd))]);
        % store
        tempData = [tempData [str2double(colInd) NaN; xValue M(xInd, str2double(colInd))]];
    end
    disp('------');
    DB = [DB {tempData}];
catch ME
    error('Error. Please see ME for details.');
end

%% Undo the previous picking
DB = DB(1:end-1);

%% Export to Excel File
exportMode = 'by column';
sortByTime = 1;
[~,name,~] = fileparts(filename);
dt = datestr(now,'mm_dd_yyyy_HH_MM_SS');
switch exportMode
    case 'by row'
        for i = 1:length(DB)
            xlswrite([filepath,'Stick_slip_',name,'.xlsx'],...
                DB{i}, ['Picked_at_',dt], ['A',num2str(1 + 2*(i-1))]);
        end
    case 'by column'
        exportByColumn = cell(1, size(M,2));
        for i = 1:length(DB)
            for j = 1:size(DB{i},2)/2
                tempColInd = DB{i}(1,(j-1)*2+1);
                exportByColumn{tempColInd} = [exportByColumn{tempColInd};...
                    DB{i}(2,(j-1)*2+1:(j-1)*2+2)];
            end
        end
        cnt = 0;
        for i = 1:length(exportByColumn)
            if isempty(exportByColumn{i})
                continue;
            end
            cnt = cnt + 1;
            if sortByTime
                toExport = sortrows(exportByColumn{i});
            else
                toExport = exportByColumn{i};
            end
            xlswrite([filepath,'Stick_slip_',name,'.xlsx'],...
                [i, NaN; toExport], ['Picked_at_',dt],...
                [char(65+(cnt-1)*2),'1']);
        end
    otherwise
        disp('Please specify a valid export mode.');
end
msgbox('Done.');